spotify %>% filter(year>2019) %>% ggplot()+
geom_density(mapping = aes(x=explicit,y=duration_ms))
spotify %>% ggplot()+
geom_line(mapping = aes(x=explicit,y=year))
spotify %>% ggplot()+
geom_bar(mapping = aes(x=explicit,y=year))
spotify %>% ggplot()+
geom_barplot(mapping = aes(x=explicit,y=year))
spotify %>% ggplot()+
geom_bar(mapping = aes(x=explicit,y=year))
spotify %>% ggplot()+
geom_bar(mapping=aes(x=year, explicit), position='dodge')
spotify %>% ggplot()+
geom_bar(mapping=aes(x=year, y=explicit), position='dodge')
spotify %>% ggplot()+
geom_bar(mapping=aes(x=year, fill=explicit), position='dodge')
spotify %>% ggplot()+
geom_bar(mapping=aes(x=year, fill=popularity), position='dodge')
knitr::opts_chunk$set(message = FALSE)
library(gganimate)
library(ggplot2)
library(knitr)
library(gifski)
df$week <- week(df$Date_reported)
library(tidyverse)
library(lubridate)
df <- read_csv("https://covid19.who.int/WHO-COVID-19-global-data.csv")
str(df)
library(gganimate)
library(ggplot2)
library(knitr)
library(gifski)
df$week <- week(df$Date_reported)
d1 <- df %>% group_by(week, Country) %>% summarise(mean=mean(Cumulative_deaths))
d2 <- d1 %>% group_by(week) %>% mutate(rank=rank(-mean)) %>% ungroup()
d3 <- d2 %>% filter(rank <= 10)
a1 <- d3 %>% ggplot(aes(x=rank, y=mean, group=Country, fill=Country, label=Country)) + geom_col()+
geom_text(aes(y = mean, label = Country), hjust = 1.4)+
coord_flip(clip = "off", expand = FALSE) +scale_x_reverse()+
labs(title = 'Week {closest_state}', x='', y='Total Deaths', fill='Country')+
theme(plot.title = element_text(hjust = 1, size = 22),
axis.ticks.y = element_blank(),
axis.text.y  = element_blank()) +
transition_states(week)+
ease_aes("cubic-in-out")
animate(a1, nframes = 400, fps = 10)
library(gganimate)
library(ggplot2)
library(knitr)
library(gifski)
df$month <- month(df$Date_reported)
d1 <- df %>% group_by(week, Country) %>% summarise(mean=mean(Cumulative_deaths))
d2 <- d1 %>% group_by(week) %>% mutate(rank=rank(-mean)) %>% ungroup()
d3 <- d2 %>% filter(rank <= 10)
a1 <- d3 %>% ggplot(aes(x=rank, y=mean, group=Country, fill=Country, label=Country)) + geom_col()+
geom_text(aes(y = mean, label = Country), hjust = 1.4)+
coord_flip(clip = "off", expand = FALSE) +scale_x_reverse()+
labs(title = 'Week {closest_state}', x='', y='Total Deaths', fill='Country')+
theme(plot.title = element_text(hjust = 1, size = 22),
axis.ticks.y = element_blank(),
axis.text.y  = element_blank()) +
transition_states(week)+
ease_aes("cubic-in-out")
animate(a1, nframes = 400, fps = 10)
library(gganimate)
library(ggplot2)
library(knitr)
library(gifski)
df$month <- month(df$Date_reported)
d1 <- df %>% group_by(week, Country) %>% summarise(mean=mean(Cumulative_deaths))
d2 <- d1 %>% group_by(week) %>% mutate(rank=rank(-mean)) %>% ungroup()
d3 <- d2 %>% filter(rank <= 10)
a1 <- d3 %>% ggplot(aes(x=rank, y=mean, group=Country, fill=Country, label=Country)) + geom_col()+
geom_text(aes(y = mean, label = Country), hjust = 1.4)+
coord_flip(clip = "off", expand = FALSE) +scale_x_reverse()+
labs(title = 'Week {closest_state}', x='', y='Total Deaths', fill='Country')+
theme(plot.title = element_text(hjust = 1, size = 22),
axis.ticks.y = element_blank(),
axis.text.y  = element_blank()) +
transition_states(week)+
ease_aes("cubic-in-out")
animate(a1, nframes = 200, fps = 10)
library(gganimate)
library(ggplot2)
library(knitr)
library(gifski)
df$month <- month(df$Date_reported)
d1 <- df %>% group_by(month, Country) %>% summarise(mean=mean(Cumulative_deaths))
d2 <- d1 %>% mutate(rank=rank(-mean)) %>% ungroup()
d3 <- d2 %>% filter(rank <= 10)
a1 <- d3 %>% ggplot(aes(x=rank, y=mean, group=Country, fill=Country, label=Country)) + geom_col()+
geom_text(aes(y = mean, label = Country), hjust = 1.4)+
coord_flip(clip = "off", expand = FALSE) +scale_x_reverse()+
labs(title = 'Month {closest_state}', x='', y='Total Deaths', fill='Country')+
theme(plot.title = element_text(hjust = 1, size = 22),
axis.ticks.y = element_blank(),
axis.text.y  = element_blank()) +
transition_states(month)+
ease_aes("cubic-in-out")
animate(a1, nframes = 200, fps = 10)
knitr::opts_chunk$set(message = FALSE)
police <- read_csv('shootings.csv')
library(tidyverse)
police <- read_csv('shootings.csv')
p1 <- police %>% filter(state=='RI') %>% group_by(race)%>% summarise(mean=mean(age))
p2 <- p1 %>% mutate(rank=rank(-mean)) %>% ungroup()
a1 <- p2 %>% ggplot(aes(x=rank, y=mean, group=race, fill=race, label=race)) + geom_col()+
geom_text(aes(y = mean, label = race), hjust = 1.4)+
coord_flip(clip = "off", expand = FALSE) +scale_x_reverse()+
labs(title = 'Date: {closest_state}', x='', y='mean', fill='Race')+
theme(plot.title = element_text(hjust = 1, size = 22),
axis.ticks.y = element_blank(),
axis.text.y  = element_blank()) +
transition_states(date)+
ease_aes("cubic-in-out")
library(tidyverse)
library(lubridate)
df <- read_csv("https://covid19.who.int/WHO-COVID-19-global-data.csv")
str(df)
library(tidyverse)
library(gganimate)
police <- read_csv('shootings.csv')
p1 <- police %>% filter(state=='RI') %>% group_by(race)%>% summarise(mean=mean(age))
p2 <- p1 %>% mutate(rank=rank(-mean)) %>% ungroup()
a1 <- p2 %>% ggplot(aes(x=rank, y=mean, group=race, fill=race, label=race)) + geom_col()+
geom_text(aes(y = mean, label = race), hjust = 1.4)+
coord_flip(clip = "off", expand = FALSE) +scale_x_reverse()+
labs(title = 'Date: {closest_state}', x='', y='mean', fill='Race')+
theme(plot.title = element_text(hjust = 1, size = 22),
axis.ticks.y = element_blank(),
axis.text.y  = element_blank()) +
transition_states(date)+
ease_aes("cubic-in-out")
animate(a1, nframes = 200, fps = 10)
library(tidyverse)
library(gganimate)
police <- read_csv('shootings.csv')
p1 <- police %>% filter(state=='RI') %>% group_by(date,race)%>% summarise(mean=mean(age))
p2 <- p1 %>% mutate(rank=rank(-mean)) %>% ungroup()
a1 <- p2 %>% ggplot(aes(x=rank, y=mean, group=race, fill=race, label=race)) + geom_col()+
geom_text(aes(y = mean, label = race), hjust = 1.4)+
coord_flip(clip = "off", expand = FALSE) +scale_x_reverse()+
labs(title = 'Date: {closest_state}', x='', y='mean', fill='Race')+
theme(plot.title = element_text(hjust = 1, size = 22),
axis.ticks.y = element_blank(),
axis.text.y  = element_blank()) +
transition_states(date)+
ease_aes("cubic-in-out")
animate(a1, nframes = 200, fps = 10)
p1 <- police %>% group_by(date, race) %>% summarise(mean=mean(age))
p2 <- p1 %>% mutate(rank=rank(-mean)) %>% ungroup()
p3 <- p2 %>% filter(rank <= 10)
a1 <- d3 %>% ggplot(aes(x=rank, y=mean, group=race, fill=race, label=race)) + geom_col()+
geom_text(aes(y = mean, label = race), hjust = 1.4)+
coord_flip(clip = "off", expand = FALSE) +scale_x_reverse()+
labs(title = 'Date {closest_state}', x='', y='Age', fill='Race')+
theme(plot.title = element_text(hjust = 1, size = 22),
axis.ticks.y = element_blank(),
axis.text.y  = element_blank()) +
transition_states(date)+
ease_aes("cubic-in-out")
animate(a1, nframes = 200, fps = 10)
library(tidyverse)
library(gganimate)
police <- read_csv('shootings.csv')
str(police)
library(tidyverse)
library(gganimate)
police <- read_csv('shootings.csv')
police$race
library(tidyverse)
library(gganimate)
police <- read_csv('shootings.csv')
p1 <- police %>% group_by(date,race) %>% summarise(mean=mean(age))
p2 <- p1 %>% mutate(rank=rank(-mean)) %>% ungroup()
p3 <- p2 %>% filter(rank <= 10)
a1 <- d3 %>% ggplot(aes(x=rank, y=mean, group=race, fill=race, label=race)) + geom_col()+
geom_text(aes(y = mean, label = race), hjust = 1.4)+
coord_flip(clip = "off", expand = FALSE) +scale_x_reverse()+
labs(title = 'Date {closest_state}', x='', y='Age', fill='Race')+
theme(plot.title = element_text(hjust = 1, size = 22),
axis.ticks.y = element_blank(),
axis.text.y  = element_blank()) +
transition_states(date)+
ease_aes("cubic-in-out")
animate(a1, nframes = 200, fps = 10)
p1 <- police %>% group_by(date,state) %>% summarise(mean=mean(age))
p2 <- p1 %>% mutate(rank=rank(-mean)) %>% ungroup()
p3 <- p2 %>% filter(rank <= 10)
a1 <- d3 %>% ggplot(aes(x=rank, y=mean, group=state, fill=state, label=stae)) + geom_col()+
geom_text(aes(y = mean, label = state), hjust = 1.4)+
coord_flip(clip = "off", expand = FALSE) +scale_x_reverse()+
labs(title = 'Date {closest_state}', x='', y='Age', fill='Race')+
theme(plot.title = element_text(hjust = 1, size = 22),
axis.ticks.y = element_blank(),
axis.text.y  = element_blank()) +
transition_states(date)+
ease_aes("cubic-in-out")
animate(a1, nframes = 200, fps = 10)
p1 <- police %>% group_by(date,state) %>% summarise(mean=mean(age))
p2 <- p1 %>% mutate(rank=rank(-mean)) %>% ungroup()
p3 <- p2 %>% filter(rank <= 10)
a1 <- d3 %>% ggplot(aes(x=rank, y=mean, group=state, fill=state, label=stae)) + geom_col()+
geom_text(aes(y = mean, label = state), hjust = 1.4)+
coord_flip(clip = "off", expand = FALSE) +scale_x_reverse()+
labs(title = 'Date {closest_state}', x='', y='Age', fill='Race')+
theme(plot.title = element_text(hjust = 1, size = 22),
axis.ticks.y = element_blank(),
axis.text.y  = element_blank()) +
transition_states(date)+
ease_aes("cubic-in-out")
animate(a1, nframes = 200, fps = 10)
p1 <- police %>% summarise(mean=mean(age))
p2 <- p1 %>% mutate(rank=rank(-mean)) %>% ungroup()
p3 <- p2 %>% filter(rank <= 10)
a1 <- d3 %>% ggplot(aes(x=rank, y=mean, group=state, fill=state, label=stae)) + geom_col()+
geom_text(aes(y = mean, label = state), hjust = 1.4)+
coord_flip(clip = "off", expand = FALSE) +scale_x_reverse()+
labs(title = 'Date {closest_state}', x='', y='Age', fill='Race')+
theme(plot.title = element_text(hjust = 1, size = 22),
axis.ticks.y = element_blank(),
axis.text.y  = element_blank()) +
transition_states(date)+
ease_aes("cubic-in-out")
animate(a1, nframes = 200, fps = 10)
p1 <- police %>% group_by(date,state)%>% summarise(mean=mean(age))
p2 <- p1 %>% mutate(rank=rank(-mean)) %>% ungroup()
p3 <- p2 %>% filter(rank <= 10)
a1 <- d3 %>% ggplot(aes(x=rank, y=mean, group=state, fill=state, label=stae)) + geom_col()+
geom_text(aes(y = mean, label = state), hjust = 1.4)+
coord_flip(clip = "off", expand = FALSE) +scale_x_reverse()+
labs(title = 'Date {closest_state}', x='', y='Age', fill='Race')+
theme(plot.title = element_text(hjust = 1, size = 22),
axis.ticks.y = element_blank(),
axis.text.y  = element_blank()) +
transition_states(date)+
ease_aes("cubic-in-out")
animate(a1, nframes = 200, fps = 10)
p1 <- police %>% group_by(date,state.name)%>% summarise(mean=mean(age))
p1 <- police %>% group_by(date,police$state)%>% summarise(mean=mean(age))
p2 <- p1 %>% mutate(rank=rank(-mean)) %>% ungroup()
p3 <- p2 %>% filter(rank <= 10)
a1 <- d3 %>% ggplot(aes(x=rank, y=mean, group=state, fill=state, label=stae)) + geom_col()+
geom_text(aes(y = mean, label = state), hjust = 1.4)+
coord_flip(clip = "off", expand = FALSE) +scale_x_reverse()+
labs(title = 'Date {closest_state}', x='', y='Age', fill='Race')+
theme(plot.title = element_text(hjust = 1, size = 22),
axis.ticks.y = element_blank(),
axis.text.y  = element_blank()) +
transition_states(date)+
ease_aes("cubic-in-out")
animate(a1, nframes = 200, fps = 10)
p1 <- police %>% group_by(date,state)%>% summarise(mean=mean(age))
p2 <- p1 %>% mutate(rank=rank(-mean)) %>% ungroup()
p3 <- p2 %>% filter(rank <= 10)
table(p3)
p1 <- police %>% group_by(date,state)%>% summarise(mean=mean(age))
p2 <- p1 %>% mutate(rank=rank(-mean)) %>% ungroup()
p3 <- p2 %>% filter(rank <= 10)
police %>% ggplot(aes(x= state,fill= race))+geom_col()
police %>% ggplot(aes(x= state,fill= race))+geom_bar()
a1 <- d3 %>% police %>% ggplot(aes(x= state,fill= race))+geom_bar()+
coord_flip(clip = "off", expand = FALSE) +scale_x_reverse()+
labs(title = 'Date {closest_state}', x='', y='Count', fill='Race')+
theme(plot.title = element_text(hjust = 1, size = 22),
axis.ticks.y = element_blank(),
axis.text.y  = element_blank()) +
transition_states(date)+
ease_aes("cubic-in-out")
a1 <- police %>% ggplot(aes(x= state,fill= race))+geom_bar()+
coord_flip(clip = "off", expand = FALSE) +scale_x_reverse()+
labs(title = 'Date {closest_state}', x='', y='Count', fill='Race')+
theme(plot.title = element_text(hjust = 1, size = 22),
axis.ticks.y = element_blank(),
axis.text.y  = element_blank()) +
transition_states(date)+
ease_aes("cubic-in-out")
animate(a1, nframes = 200, fps = 10)
knitr::opts_chunk$set(message = FALSE)
library(mlbench)
install(mlbench)
install.packages(mlbench)
install.packages('mlbench')
library(mlbench)
data(PimaIndiansDiabetes)
df <- PimaIndiansDiabetes
install.packages('caret')
library(caret)
set.seed(2020)
splitIndex <- createDataPartition(df$target, p = .80,
list = FALSE)
library(mlbench)
data(PimaIndiansDiabetes)
df <- PimaIndiansDiabetes
str(df)
library(caret)
names(df)[9]<-target
library(caret)
names(df)[9]<-'target'
set.seed(2020)
names(df)
sapply(df, function(x) sum(is.na(x)))
splitIndex <- createDataPartition(df$target, p = .80,
list = FALSE)
df_train <- df[ splitIndex,]
df_test <- df[-splitIndex,]
install.packages('rpart')
library(rpart) #load the rpart package
# Create a tree
tree_model <- rpart(target ~ ., data = df_train,
control = rpart.control(maxdepth = 3))
library(rattle)
install.packages('rattle')
library(rattle)
fancyRpartPlot(tree_model)
pred <- predict(tree_model, df_test, type = "class")
#Evaluate the predictions
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "1")
pred <- predict(tree_model, df_test, type = "class")
#Evaluate the predictions
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "1")
pred <- predict(tree_model, df_test, type = "class")
#Evaluate the predictions
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "2")
pred <- predict(tree_model, df_test, type = "class")
#Evaluate the predictions
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "2")
install.packages('e1071')
library(e1071)
pred <- predict(tree_model, df_test, type = "class")
#Evaluate the predictions
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "2")
library(e1071)
pred <- predict(tree_model, df_test, type = "class")
#Evaluate the predictions
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "2")
library(e1071)
pred <- predict(tree_model, df_test, type = "class")
#Evaluate the predictions
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "1")
library(e1071)
pred <- predict(tree_model, df_test, type = "class")
#Evaluate the predictions
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "2")
pred
library(e1071)
pred <- predict(tree_model, df_test, type = "class")
#Evaluate the predictions
cm <- confusionMatrix(data = pred, reference = df_test$target, pos = "2")
library(e1071)
pred <- predict(tree_model, df_test, type = "class")
#Evaluate the predictions
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
tree_model$variable.importance
barplot(tree_model$variable.importance)
library(randomForest)
install.packages('randomForest')
library(randomForest)
forest_model = randomForest(target ~ ., data=df_train, ntree = 500)
pred <- predict(forest_model, df_test, type = "class")
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
pred <- predict(forest_model, df_test, type = "class")
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
library(randomForest)
forest_model = randomForest(target ~ ., data=df_train, ntree = 500)
pred <- predict(forest_model, df_test, type = "class")
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
barplot(forest_model$variable.importance)
importance(forest_model)
barplot(importance(forest_model))
importance(forest_model)
library(randomForest)
forest_model = randomForest(target ~ ., data=df_train, ntree = 1000)
pred <- predict(forest_model, df_test, type = "class")
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
importance(forest_model)
forest_model2 <- randomForest(target ~.,data=df_train,ntree=2000)
forest_model2 <- randomForest(target ~.,data=df_train,ntree=2000)
pred <- predict(forest_model2, df_test, type = "class")
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
model2 <- train(target~., data=df_train,
method = "rf",
ntree = 1000)
model1 <- train(target~., data=df_train,
method = "rpart2",
maxdepth="3")
pred <- predict(model2, df_test)
model1 <- train(target~., data=df_train,
method = "rpart2",
maxdepth="3")
pred <- predict(model1, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
model2 <- train(target~., data=df_train,
method = "rf",
ntree = 1000)
pred <- predict(model2, df_test)
model2 <- train(target~., data=df_train,
method = "rf",
ntree = 1000)
model2 <- train(target~., data=df_train,
method = "rf",
ntree = 1000)
pred <- predict(model2, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
varImp(model1)
varImp(model2)
knitr::opts_chunk$set(message = FALSE)
library(tidyverse)
titanic_df=read_csv('train.csv')
knitr::opts_chunk$set(message = FALSE)
library(mlbench)
data(PimaIndiansDiabetes)
df <- PimaIndiansDiabetes
library(caret)
names(df)[9]<-'target'
set.seed(2020)
splitIndex <- createDataPartition(df$target, p = .80,
list = FALSE)
df_train <- df[ splitIndex,]
df_test <- df[-splitIndex,]
# Decide the range of the maxdepth to search for the best
tuneGrid = expand.grid(maxdepth = 2:10)
# Tell caret to do approach 2
trControl = trainControl(method = "LGOCV",
number = 10)
# Do approach 2
tree_approach2 <- train(target~., data=df_train,
method = "rpart2",
trControl = trControl,
tuneGrid = tuneGrid)
plot(tree_approach2)
# Decide the range of the maxdepth to search for the best
tuneGrid = expand.grid(maxdepth = 2:10)
# Tell caret to do approach 3, i.e. Cross-Validation
trControl = trainControl(method = "cv",
number = 10)
# Do approach 3
tree_approach3 <- train(target~., data=df_train,
method = "rpart2",
trControl = trControl,
tuneGrid = tuneGrid)
plot(tree_approach3)
pred <- predict(tree_approach3, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
tuneGrid = expand.grid(maxdepth = 3)
pred <- predict(tree_approach3, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
tuneGrid = expand.grid(maxdepth = 3)
pred <- predict(tree_approach3, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
# Decide the range of the maxdepth to search for the best
tuneGrid = expand.grid(maxdepth = 2:10)
# Tell caret to do approach 2
trControl = trainControl(method = "LGOCV",
number = 10)
# Do approach 2
tree_approach2 <- train(target~., data=df_train,
method = "rpart2",
trControl = trControl,
tuneGrid = tuneGrid)
tuneGrid = expand.grid(maxdepth = 8)
pred <- predict(tree_approach2, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
pred <- predict(tree_approach3, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
pred <- predict(tree_approach2, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
knitr::opts_chunk$set(message = FALSE)
library(mlbench)
data(PimaIndiansDiabetes)
df <- PimaIndiansDiabetes
library(caret)
names(df)[9]<-'target'
set.seed(2020)
splitIndex <- createDataPartition(df$target, p = .80,
list = FALSE)
df_train <- df[ splitIndex,]
df_test <- df[-splitIndex,]
tuneGrid = expand.grid(mtry = 2:4)
trControl = trainControl(method = "cv",
number = 30)
forest_cv <- train(target~., data=df_train,
method = "rf",
trControl = trControl,
tuneGrid = tuneGrid)
plot(forest_cv)
getModelInfo('rf')$rf$parameters
install.packages('haven')
library(haven)
mid_df <- read_sas(`hdd0318cy.sas7bdat`)
library(haven)
mid_df <- read_sas(hdd0318cy.sas7bdat)
library(haven)
mid_df <- read_sas(hdd0318cy.sas7bdat)
library(haven)
mid_df <- read_sas('hdd0318cy.sas7bdat')
library(haven)
mid_df <- read_sas('hdd0318cy.sas7bdat')
